/*  ğŸŸ¨ Soyutlama nedir?
Bazen bir Ã¼st sÄ±nÄ±f (superclass) tanÄ±mlamak isteriz ama bu sÄ±nÄ±f sadece genel bir yapÄ± tanÄ±mlar, kendi baÅŸÄ±na kullanÄ±lmaz.
Ã–rneÄŸin: Hayvan sÄ±nÄ±fÄ± genel bir ÅŸeydir, ama doÄŸrudan "bir hayvan" nesnesi yaratmak mantÄ±klÄ± deÄŸildir; onun yerine KÃ¶pek, Kedi gibi alt sÄ±nÄ±flar oluÅŸtururuz.
ğŸŸ© abstract metot nedir?
EÄŸer bir metot, sadece adÄ± ve parametreleriyle tanÄ±mlanÄ±r ama gÃ¶vdesi yoksa, bu metoda abstract metot denir.
abstract void speak();
Bu metot alt sÄ±nÄ±flar tarafÄ±ndan override edilmek zorundadÄ±r. Aksi halde derleyici hata verir.
ğŸŸ¥ abstract sÄ±nÄ±f nedir?
En az bir abstract metot iÃ§eriyorsa sÄ±nÄ±f da abstract olmak zorundadÄ±r.
abstract sÄ±nÄ±flardan doÄŸrudan nesne oluÅŸturulamaz.


Sometimes we want to create a superclass that only defines a generalized form that will be shared by all of its subclasses.
We can require that certain methods be overridden by subclasses by specifying the abstract type modifier. 
To declare an abstract method:
  abstract type name(parameter-list);
No method body will be present.
If sub-class does not override the abstract method, compiler will generate an error.
No object of an abstract class can be created.
*/

abstract class Figure {
    double dim1;
    double dim2;

    Figure (double a, double b) {
        dim1 = a;
        dim2 = b;
    }

    abstract double area();
}
class Rectangle extends Figure {
    Rectangle(double a,double b) {
        super(a,b);
    }

    double area() {
        System.out.println("Inside area for rectangle ");
        return dim1 * dim2;
    }
}
public class abstracttt {
    public static void main(String[] args) {
        Rectangle r = new Rectangle(9,5);
        System.out.println("Rea is "+ r.area());
    }
}