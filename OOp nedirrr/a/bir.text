ğŸ“Œ Java'da SÄ±nÄ±flar ve Nesneler HakkÄ±nda Temel Bilgiler
ğŸ”¹ 1. Java'daki SÄ±nÄ±flar (Classes)
Ã–nceki bÃ¶lÃ¼mlerde oluÅŸturulan sÄ±nÄ±flar Ã§oÄŸunlukla sadece main() metodunu kapsamak iÃ§in yazÄ±lmÄ±ÅŸtÄ±r. AmaÃ§, Java sÃ¶zdiziminin (syntax) temellerini gÃ¶stermekti.

Ancak aslÄ±nda sÄ±nÄ±flar yeni bir veri tÃ¼rÃ¼ (data type) tanÄ±mlar.

Bu yeni tÃ¼r tanÄ±mlandÄ±ktan sonra, bu tÃ¼rden nesneler (objects) oluÅŸturulabilir.

Yani, bir sÄ±nÄ±f bir nesne iÃ§in ÅŸablondur (template) ve bir nesne, bir sÄ±nÄ±fÄ±n Ã¶rneÄŸidir (instance).

Bu yÃ¼zden Java'da "object" ve "instance" terimleri genellikle birbirinin yerine kullanÄ±lÄ±r.

ğŸ”¹ 2. Ãœyeler (Members): DeÄŸiÅŸkenler ve Metotlar
Bir sÄ±nÄ±f iÃ§inde tanÄ±mlanan verilere (deÄŸiÅŸkenlere) "Ã¶rnek deÄŸiÅŸken (instance variable)" denir.

SÄ±nÄ±f iÃ§indeki kodlar ise metotlar iÃ§erisinde yer alÄ±r.

Hem metotlar hem de deÄŸiÅŸkenler birlikte sÄ±nÄ±fÄ±n Ã¼yeleri (members) olarak adlandÄ±rÄ±lÄ±r.

ğŸ”¹ 3. Neden "Instance Variable" Denir?
Ã‡Ã¼nkÃ¼ bir sÄ±nÄ±fÄ±n her bir nesnesi, bu deÄŸiÅŸkenlerin kendi kopyalarÄ±na sahiptir.

Yani bir nesnenin verileri, baÅŸka bir nesneninkilerden baÄŸÄ±msÄ±z ve kendine Ã¶zgÃ¼dÃ¼r.

ğŸ”¹ 4. main() Metodu Zorunlu DeÄŸildir
Java sÄ±nÄ±flarÄ±nÄ±n main() metoduna sahip olmasÄ± zorunlu deÄŸildir.

Sadece o sÄ±nÄ±f programÄ±n baÅŸlangÄ±Ã§ noktasÄ± olacaksa main() metodu gerekir.

Ã–rneÄŸin, bazÄ± Java uygulamalarÄ± (Ã¶rneÄŸin appletler) hiÃ§ main() metoduna ihtiyaÃ§ duymaz.



Box mybox = new Box(); // mybox adÄ±nda bir Box nesnesi oluÅŸtur
Bu satÄ±r Ã§alÄ±ÅŸtÄ±ktan sonra mybox artÄ±k Box tÃ¼rÃ¼nden gerÃ§ek bir nesne, yani bir instance olur.

ArtÄ±k mybox nesnesi, width, height ve depth isimli kendi deÄŸiÅŸken kopyalarÄ±na sahiptir.

 Nokta (.) OperatÃ¶rÃ¼
Nesnenin iÃ§indeki deÄŸiÅŸkenlere veya metotlara eriÅŸmek iÃ§in . (nokta) operatÃ¶rÃ¼ kullanÄ±lÄ±r.

mybox.width = 10;
Bu, mybox nesnesinin width deÄŸiÅŸkenine eriÅŸimi gÃ¶sterir.

Bu operatÃ¶r yaygÄ±n olarak "dot operator" olarak adlandÄ±rÄ±lÄ±r.

AslÄ±nda Java'nÄ±n resmi tanÄ±mÄ±nda bu . sembolÃ¼ bir "ayÄ±rÄ±cÄ±" (separator) olarak geÃ§er.

Ama "dot operator" terimi o kadar yaygÄ±ndÄ±r ki, Ã§oÄŸu kaynakta bu ÅŸekilde kullanÄ±lÄ±r.

