class Box {
    double width;
    double height;
    double depth;
}

    public class ReferenceExample {
        public static void main(String[] args) {
            Box kutu1 = new Box();
            // b1 bir Box nesnesini referans ediyor

            kutu1.width = 5;
            kutu1.height =10;
            kutu1.depth=15;


            Box kutu2 = kutu1; // b2 de aynÄ± Box nesnesini referans ediyor (yeni bir nesne yok!)

             // kutu2 Ã¼zerinden bir deÄŸiÅŸiklik yapalÄ±m
             kutu2.width = 100;

             System.out.println("kutu1 width = "+kutu1.width);//100
             System.out.println("kutu2 width = "+ kutu2.width);//100

             kutu1 = null;

             System.out.println("kutu2 width after kutu1 null= "+ kutu2.width);//100

              // b1 artÄ±k nesneye ulaÅŸamaz, ama nesne hala b2 ile eriÅŸilebilir
        // System.out.println(b1.width); // bu satÄ±r hata verir Ã§Ã¼nkÃ¼ b1 artÄ±k null
        }
    }

    /*
     ğŸ“Œ Neden b1 ulaÅŸamÄ±yor ama b2 hÃ¢lÃ¢ ulaÅŸabiliyor?
     ğŸ§  Ã‡Ã¼nkÃ¼:
b1 ve b2 nesnenin kendisini deÄŸil, o nesneye giden yolu (referansÄ±) tutuyor. Yani Box nesnesi bellekte bir yerde duruyor ve b1 ile b2 onun adresini (yerini) biliyor.

ÅŸu satÄ±r ÅŸuu yapÄ±yor 
Box b2 = b1;
"Hey b2, sen de b1â€™in gÃ¶sterdiÄŸi nesneyi gÃ¶ster."

Yani b1 ve b2, aynÄ± adresi tutuyorlar â†’ aynÄ± nesneye bakÄ±yorlar.


b1 = null;
"b1 artÄ±k hiÃ§bir nesneyi gÃ¶stermesin. Elindeki adresi unut."

Ama bu sÄ±rada b2, o adresi hÃ¢lÃ¢ tutuyor. Yani nesneye hala eriÅŸebilen bir yol var, o da b2.


     */